"  fu BasicInit()
"  	let mapleader = " "	" Leader set to space
"  endf

"  call BasicInit()

fu GeneralInit()
	" LAYOUT
	"  set tabpagemax=100		" Maximum #tabs
	"  set laststatus=2		" Always show status line
	set number				" Line numbers
	set relativenumber		" Relative line numbers
	"  set numberwidth=4		" Relative line numbers
	"  set wildmenu			" Command line completion

	" LINE WRAP
	"  set wrap linebreak		" Wrap word for word
	"  set formatoptions+=l	" Ensures word-wrap does not split words

	" HIGHLIGHT
	"  set nolist					" Do not print tab and eol characters
	"  syntax on					" Syntax highlighting
	"  let &t_SI = "\e[6 q"		" Cursor block in normal mode
	"  let &t_EI = "\e[2 q"		" Cursor vertical bar in insert mode

	" INDENT
	"  set tabstop=4			" #Spaces in tab character
	"  set softtabstop=0		" #Space in tab while editing
	"  set shiftwidth=4		" #Spaces in auto indent
	"  set shiftround			" Round indent to multiple of shiftwidth
	"  set autoindent			" Current indent is applied to the next
	"  set breakindent			" Current indent is applied to wrapeed line
	"  set nopaste				" If on: Pasting from other windows include indenting

	" SEARCH
	set hlsearch			" Highlight all matches
	set incsearch			" Instant highlight
	set ignorecase			" Ignore case
	set smartcase			" Use case when uppercase

	" EDIT
	"  set nofoldenable		" All folds are open
	"  set foldmethod=indent	" Lines with equal indent create a fold
	"  set backspace=2			" Backspace on indent, eol and start of insert
	"  set timeout				" Timeout on :mappings and key codes
	"  set ttimeoutlen=50		" Timeout in ms
	let g:mapleader = " "	" Leader set to space

	" NAVIGATE
	"  set splitright			" Open new file on the right
	"  set splitbelow			" Open new file below

	" UNDO
	"  set undofile				" Use an undo history file
	"  set undodir=$HOME/.vim/undo	" Undo file path
	"  set undolevels=1000			" Max #undo
	"  set undoreload=10000		" Max #lines in buffer to save for undo upon reload

	" OS
	"  set nocompatible			" Disable VI compatibility
	"  set encoding=utf-8			" Character encoding
	"  set noswapfile			" Do not generate swap file
	"  set shell=bash\ --login	" Execute bashrc aliases in ! mode
	set clipboard=unnamedplus	" Use both '+' and '*' register as clipboard
	"  set mouse=a				" Enable mouse in all modes
	set visualbell				" Disable bell
	"  set t_vb=				" Disable bell

	" FILETYPE
	"  filetype on			" On edit: Do filetype detection
	"  filetype plugin on	" On edit: Load ftplugin files with matching filetype
	"  filetype indent on	" On edit: Load indent files with matching filetype
endf

call GeneralInit()

fu MapInit()
	" Keep selection when indenting
	vnoremap > >gv
	vnoremap < <gv

	" Disable Arrow keys in Escape mode
	noremap <up> <nop>
	noremap <down> <nop>
	noremap <left> <nop>
	noremap <right> <nop>
	" Disable Arrow keys in Insert mode
	inoremap <up> <nop>
	inoremap <down> <nop>
	inoremap <left> <nop>
	inoremap <right> <nop>

	" ALT KEY
	" Mapping Alt keycode to POSIX standar Alt keycode
	"  for i in range(char2nr('a'), char2nr('z'))
	"  	let i = nr2char(i)
	"  	exec "set <A-".i.">=\e".i
	"  	exec "imap \e".i." <A-".i.">"
	"  endfor
	" Move lines up or down with <A-{j/k}>
	nnoremap <A-j> :m+<CR>==
	nnoremap <A-k> :m-2<CR>==
	vnoremap <A-j> :m '>+<CR>gv=gv
	vnoremap <A-k> :m '<-2<CR>gv=gv
	inoremap <A-j> <Esc>:m+<CR>==gi
	inoremap <A-k> <Esc>:m-2<CR>==gi
endf

call MapInit()

fu MapLeaderInit()
	" Extended normal mode commands
	noremap <leader>jj 50j<C-e><cr>
	noremap <leader>kk 50k<C-y><cr>

	" Preserve paste
	vnoremap <leader>p "_dP

	" Soft2Hard tabs
	nmap <leader>T :%s/\s\s\s\s/\t/g<cr>
	" Hard2Soft tabs
	nmap <leader>H :%s/\t/	/g<cr>

	" Move tab next
	nnoremap <leader>} :tabm +1<cr>
	" Move tab prev
	nnoremap <leader>{ :tabm -1<cr>
	" Move tab next
	nnoremap <leader>] :tabn<cr>
	" Move tab prev
	nnoremap <leader>[ :tabp<cr>
	" Fuzzy open file at tab next
	nnoremap <leader>f] :tabe <bar> Files<cr>
	" Fuzzy open file at tab prev
	nnoremap <leader>f[ :tabe <bar> tabm -1 <bar> Files<cr>

	" Fuzzy lines and files search
	nnoremap <leader>fg :Rg<cr>
	" Fuzzy lines search
	nnoremap <leader>fl :BLines<cr>
	" Fuzzy file search
	nnoremap <leader>ff :Files<cr>
	" Fuzzy history search
	nnoremap <leader>fF :History<cr>
	" Fuzzy command search
	nnoremap <leader>fr :History:<cr>
	" Fuzzy search search
	nnoremap <leader>f/ :History/<cr>

	" Clear search
	nnoremap <leader>o :noh<cr>

	" Opening vimsplit
	nnoremap <leader>fh :split <bar> Files<cr>
	nnoremap <leader>fv :vsplit <bar> Files<cr>

	" Navigating vimsplit
	nnoremap <leader>j :wincmd j<CR>
	nnoremap <leader>k :wincmd k<CR>
	nnoremap <leader>l :wincmd l<CR>
	nnoremap <leader>h :wincmd h<CR>

	" Toggling
	nnoremap <leader>tp :call ToggleOption('paste')<cr>
	nnoremap <leader>tn :call ToggleOption('number')<cr>
	nnoremap <leader>tc :call ToggleOption('spell')<cr>
	nnoremap <leader>ts :SyntasticToggleMode<cr>

	" Comment out/in line
	" nnoremap <leader>c :call CommenterToggle()<cr>

	" Save
	nmap <leader>w :w<cr>
	" Quit
	nmap <leader>q :q<cr>
	" Save and quit
	nmap <leader>Q :wq<cr>
endf

call MapLeaderInit()

fu FunctionsInit()
	" Toggle option and print value
	fu ToggleOption(option)
		exec 'set ' . a:option . '!'
		exec 'set ' . a:option . '?'
	endf
endf

call FunctionsInit()

fu Jetbrains()
	sethandler <C-2> a:ide
	sethandler <C-S-2> a:ide
	sethandler <C-6> a:ide
	sethandler <C-S-6> a:ide
	sethandler <C-A> a:vim
	sethandler <C-B> a:vim
	sethandler <C-C> a:ide
	sethandler <C-D> a:ide
	sethandler <C-E> a:ide
	sethandler <C-F> a:ide
	sethandler <C-G> a:ide
	sethandler <C-H> a:ide
	sethandler <C-I> a:ide
	sethandler <C-J> a:ide
	sethandler <C-K> a:ide
	sethandler <C-L> a:ide
	sethandler <C-M> a:ide
	sethandler <C-N> a:ide
	sethandler <C-O> a:vim
	sethandler <C-P> a:ide
	sethandler <C-R> a:vim
	sethandler <C-S> a:ide
	sethandler <C-T> a:ide
	sethandler <C-U> a:ide
	sethandler <C-V> a:vim
	sethandler <C-W> a:ide
	sethandler <C-X> a:vim
	sethandler <C-[> a:ide
	sethandler <C-\> a:ide
	sethandler <C-]> a:ide
endf

call Jetbranis()